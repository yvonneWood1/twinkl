'use strict';
/**
 * Get hr time in nanoseconds
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var nano = function nano(time) {
  return +time[0] * 1e9 + +time[1];
};
/**
 * Flatten an array
 */


var flatten = function flatten(arr) {
  return [].concat.apply([], arr);
};
/**
 * Return true if `val` is an object
 */


var isObject = function isObject(val) {
  return val !== null && _typeof(val) === 'object' && !Array.isArray(val);
};
/**
 * Create an options object from the given arguments.
 * @param {object} `app`
 * @param {...[function|string|object]} `rest`
 * @return {object}
 */


var createOptions = function createOptions(app, expand) {
  for (var _len = arguments.length, rest = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    rest[_key - 2] = arguments[_key];
  }

  var args = flatten(rest);
  var config = args.find(function (val) {
    return isObject(val) && !val.isTask;
  }) || {};
  var options = Object.assign({}, app.options, config);
  var tasks = expand === true ? app.expandTasks(args.filter(function (val) {
    return val && val !== config;
  })) : args.filter(function (val) {
    return val && val !== config;
  });
  return {
    tasks: tasks,
    options: options
  };
};
/**
 * Noop for tasks
 */


var noop = function noop(cb) {
  return cb();
};
/**
 * Create a non-enumerable property on `obj`
 */


var define = function define(obj, key, value) {
  Reflect.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    writable: true,
    value: value
  });
};
/**
 * Expose "utils"
 */


module.exports = {
  createOptions: createOptions,
  define: define,
  flatten: flatten,
  isObject: isObject,
  nano: nano,
  noop: noop
};