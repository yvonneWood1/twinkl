'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('./utils'),
    isObject = _require.isObject;

var noop = function noop() {};
/**
 * Parse task expressions from the argv._ (splat) array
 */


module.exports = function () {
  var register = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noop;
  return function parse(app) {
    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    if (rest.length === 1 && Array.isArray(rest[0])) rest = rest[0];
    var options = rest.find(function (val) {
      return isObject(val) && val.isTask !== true;
    });
    rest = rest.filter(function (val) {
      return val !== options;
    });
    var callback = rest.find(function (val) {
      return typeof val === 'function';
    });
    var args = rest.filter(function (val) {
      return val !== options && val !== callback;
    });

    var opts = _objectSpread({}, app.options, {}, options);

    if (typeof args[0] === 'string' && Array.isArray(args[1])) {
      args = [args[0] + ':' + args[1].join(',')];
    }

    args = args.join(' ').split(' ');
    var missing = [];
    var result = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      var _loop = function _loop() {
        var arg = _step.value;
        var segs = arg.split(':');

        if (segs.length > 2) {
          throw new SyntaxError('spaces must be used to separate multiple generator names');
        }

        var tasks = segs[1] ? segs[1].split(',') : segs[0].split(',');
        var name = segs[1] ? segs[0] : null;
        var task = {
          name: null,
          tasks: []
        };
        tasks.forEach(function (val) {
          if (!app.tasks.has(val) && app.hasGenerator(name + '.' + val)) {
            result.push({
              name: [name, val].join('.'),
              tasks: ['default']
            });
            tasks = tasks.filter(function (v) {
              return v !== val;
            });
          }
        });

        if (segs.length === 2 && tasks.length) {
          task.name = name;
          task.tasks = tasks;
          result.push(task);
          return "continue";
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = tasks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var key = _step2.value;

            if ((!app.tasks.has(key) || app.taskStack.has(key)) && app.hasGenerator(key)) {
              if (app.name === 'default' && !key.startsWith('default.')) {
                key = "default.".concat(key);
              }

              result.push({
                name: key,
                tasks: ['default']
              });
            } else if (key && app.tasks.has(key)) {
              task.name = 'default';
              task.tasks.push(key);
            } else if (key) {
              missing.push(key);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
              _iterator2["return"]();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        if (task.name) {
          result.push(task);
        }
      };

      for (var _iterator = args[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var _ret = _loop();

        if (_ret === "continue") continue;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (rest.length && !result.length && app.name !== 'default') {
      if (app.hasGenerator('default')) {
        return parse.apply(void 0, [app.getGenerator('default')].concat(_toConsumableArray(rest)));
      }
    }

    if (!rest.length && !result.length && !missing.length) {
      result = [{
        name: 'default',
        tasks: ['default']
      }];
    }

    if (missing.length && register(missing) === true) {
      return parse.apply(void 0, [app].concat(_toConsumableArray(rest)));
    }

    register(result.map(function (task) {
      return task.name;
    }));
    return {
      options: opts,
      callback: callback,
      tasks: result,
      missing: missing
    };
  };
};